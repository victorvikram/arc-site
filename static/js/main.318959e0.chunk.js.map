{"version":3,"sources":["components/Pixel.js","components/Row.js","components/DrawingPanel.js","components/Editor.js","App.js","index.js"],"names":["Pixel","props","selectedColor","dragging","changeColor","pixelColor","useState","dispPixelColor","setDispPixelColor","applyColor","new_index","colors","indexOf","backgroundColor","className","onMouseDown","onMouseEnter","onMouseLeave","style","Row","width","pixelColors","pixels","j","push","new_val","InputGrid","problemCat","grid","setDestToSource","contextRows","testRows","swapAandB","indexTrail","stage","type","lockedVariables","handleGridTypeChange","handleGridRowChange","handleGridColChange","handleAnswerLengthChange","correctAnswer","setCorrectAnswer","multipleChoice","penColor","setPixelColor","handleSceneRowChange","handleSceneColChange","setString","univSwapRows","rowIndex","currRowIndexTrail","nextRowIndexTrail","alt","currAltIndexTrail","nextAltIndexTrail","console","log","id","options","selection","onChange","NumberInput","name","value","length","useGrid","newArray","i","Math","ceil","scene","makeInto2dArray","rows","columns","colIndex","answerChangeFunc","fullCurrIndexTrail","concat","fullCounterpartIndexTrail","lastRow","GridCell","copyToCounterpart","displaySwap","swapWithNext","content","calcValFromIndexTrail","correct","changeWidth","e","changeHeight","newVal","row","col","generateGrid","PixelEditor","TextEditor","string","target","onClick","checked","setDragging","preventDefault","onMouseUp","twoDArrayCopy","arr","cols","new_arr","Array","fill","map","startArray","restrictedArr","index","Editor","problemId","setProblemId","setProblemCat","defaultGridType","setDefaultGridType","setMultipleChoice","currentItemIndexTrail","setCurrentItemIndexTrail","createGridCellByType","problem","setProblem","setPenColor","componentRef","useRef","handleQuestionLengthChange","event","newLength","parseInt","setArrayLength","generator","copyArr","difference","abs","pop","setProblemGrid","setGridRowCount","newRowCount","changeRowCount","probFromAlt","setGridColCount","newColCount","changeColCount","newGrid","newProblem","changeValFromIndexTrail","setGridType","newType","calcStage","createGrid","setLockedVariables","cat","key","keySplit","split","includes","len","gridIndex","gridType","calcGridType","choiceLen","choiceIndex","gridGiven","gridElement","dimCounter","constructor","calcIsAnswerGrid","calc2dArrayFromDict","dict","num_cols","row_index","floor","oldRowCount","colCount","pushArray","rowCount","oldColCount","applyBounds","number","ref","Object","keys","newCat","newGridType","FileUpload","handleChange","fileReader","FileReader","readAsText","files","onload","JSON","parse","result","newProblemContext","contextGrid","newMultipleChoice","newProblemQuestions","stimulusGrid","answers","setStateFromRegFileUpload","input_grid","output_grid","answer","setStateFromArcFileUpload","GridMenus","setIndexTrail","isNaN","newIndexTrail","populateIndexTrail","handleCorrectAnswer","augIndexTrail","getCorrectAnswer","newCount","r","c","copyGrid","setRowCount","setColCount","sceneRow","sceneCol","gridRow","gridCol","replaceItemsWithoutMutating","indexTrailSource","indexTrailDest","aIndexTrail","bIndexTrail","aValue","items","file","ARCJson","examples","prob","q_index","question","makeARCJson","flat","stimulus","choices","json","stringify","blob","Blob","href","URL","createObjectURL","saveAs","exportComponentAsPNG","GridViewer","panelsFromIndexTrailLists","indexTrailLists","allIndexTrails","panels","activePanel","answerIndexTrail","srcIT","dstIT","a","b","evt","idx","color","sr","sc","gr","gc","str","arcLayout","leftSide","rightSide","rightIndexTrails","modifiedRightSide","bottomIndexTrails","bottomSide","bongardLayout","inputGrids","val","makeInputGrids","selectLists","maxIndex","generateIndexTrailSelectLists","onChangeComplete","hex","circleSize","circleSpacing","SelectList","htmlOptions","ToggleAnswerButton","this","show","calculateText","React","Component","Canvas","canvasRef","createRef","data","height","buffer","Uint8ClampedArray","pos","canvas","current","ctx","getContext","clearRect","imgData","createImageData","set","putImageData","color_dict","cw","ch","padding","w","h","min","save","fillStyle","fillRect","redraw","drawGrayscale","drawCategorical","QuestionViewer","comps","no_choices","answer_type","addStimulus","addChoices","addAnswer","AnswerViewer","state","onButtonPress","bind","setState","TestViewer","questions","generateQuestionDivs","table","item_index","getRelevantData","buildTable","ind","makeOptions","ContextViewer","tables","grids","getTables","ContentSquare","thing","decode","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.318959e0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport \"../styles/pixel.scss\";\r\nimport { colors } from './Editor';\r\n\r\nexport default function Pixel(props) {\r\n    const {selectedColor, dragging, changeColor, pixelColor} = props;\r\n    const [dispPixelColor, setDispPixelColor] = useState(null);\r\n\r\n    function applyColor() {\r\n        let new_index = colors.indexOf(selectedColor);\r\n        changeColor(new_index);\r\n        setDispPixelColor(null);\r\n    }\r\n\r\n    function changeColorOnMouseEnter() {\r\n        if(dragging) {\r\n            applyColor()\r\n        }\r\n        else {\r\n            setDispPixelColor(selectedColor);\r\n        }\r\n    }\r\n\r\n    function resetColor() {\r\n        setDispPixelColor(null);\r\n    }\r\n\r\n    var backgroundColor = dispPixelColor == null ? colors[pixelColor] : dispPixelColor;\r\n\r\n    return (\r\n        <div \r\n            className=\"pixel\"\r\n            onMouseDown={applyColor}\r\n            onMouseEnter={changeColorOnMouseEnter} \r\n            onMouseLeave={resetColor} \r\n            style={{backgroundColor: backgroundColor }}>\r\n        </div>\r\n    );\r\n    \r\n}","import React from 'react';\r\nimport \"../styles/row.scss\";\r\nimport Pixel from './Pixel'\r\n\r\nexport default function Row(props) {\r\n    const { width, selectedColor, dragging, changeColor, pixelColors} = props;\r\n    let pixels = [];\r\n\r\n    for(let j = 0; j < width; j++) {\r\n        pixels.push(<Pixel key={j} selectedColor={selectedColor} dragging={dragging} changeColor={(new_val) => changeColor(j, new_val)} pixelColor={pixelColors[j]} />);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"row\">{pixels}</div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport \"../styles/drawingPanel.scss\";\r\nimport { exportComponentAsPNG } from \"react-component-export-image\";\r\n\r\nimport Row from \"./Row\";\r\nimport { colors } from './Editor';\r\nimport { NumberInput, SelectList, calcValFromIndexTrail } from './Editor';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function InputGrid(props) {\r\n    const {problemCat, grid, setDestToSource, contextRows, testRows, swapAandB, indexTrail, stage, type, lockedVariables, handleGridTypeChange, handleGridRowChange, handleGridColChange, handleAnswerLengthChange, correctAnswer, setCorrectAnswer, multipleChoice, penColor, setPixelColor, handleSceneRowChange, handleSceneColChange, setString} = props;\r\n    function univSwapRows(rowIndex) {\r\n\r\n        if(stage === \"context\") {\r\n            let currRowIndexTrail = [...indexTrail];\r\n            currRowIndexTrail.push(rowIndex);\r\n            let nextRowIndexTrail = [...indexTrail];\r\n            nextRowIndexTrail.push(rowIndex + 1);\r\n            swapAandB(currRowIndexTrail, nextRowIndexTrail)\r\n        }\r\n        else if(stage === \"answer\" || stage === \"stimulus\") {\r\n            let currRowIndexTrail = [...indexTrail];\r\n            let nextRowIndexTrail = [...indexTrail];\r\n            nextRowIndexTrail[1] = + (( +nextRowIndexTrail[1]) + 1);\r\n            swapAandB(currRowIndexTrail, nextRowIndexTrail);\r\n\r\n            \r\n            let alt = stage === \"stimulus\" ? \"answer\" : \"stimulus\";\r\n            let currAltIndexTrail = [indexTrail[0], indexTrail[1], alt];\r\n            let nextAltIndexTrail = [indexTrail[0], (+ (+ indexTrail[1]) + 1), alt];\r\n            swapAandB(currAltIndexTrail, nextAltIndexTrail);\r\n            \r\n        } \r\n    }\r\n    function generateGrid() {\r\n        let useGrid;\r\n        if(stage === \"answer\") {\r\n            useGrid = makeInto2dArray(grid);\r\n        } else {\r\n            useGrid = grid;\r\n        }\r\n        \r\n        let rows = [];\r\n        for(let i = 0; i < useGrid.length; i++) {\r\n\r\n            let columns = [];\r\n            for(let j = 0; j < useGrid[0].length; j++) {\r\n                let rowIndex = stage === \"answer\" ? i * 3 + j : i;\r\n                let colIndex = stage === \"answer\" ? null : j;\r\n\r\n                console.log(correctAnswer, rowIndex);\r\n                \r\n                let answerChangeFunc;\r\n                if(problemCat === \"bongard\") {\r\n                    answerChangeFunc = setCorrectAnswer\r\n                } else {\r\n                    answerChangeFunc = () => setCorrectAnswer(rowIndex);\r\n                }\r\n                \r\n                let fullCurrIndexTrail = indexTrail.concat([rowIndex, colIndex]);\r\n                let fullCounterpartIndexTrail;\r\n                let lastRow;\r\n\r\n                if(stage === \"context\") {\r\n                    fullCounterpartIndexTrail = indexTrail.concat([rowIndex, (+ !colIndex)]);\r\n                    lastRow = (rowIndex === (contextRows - 1));\r\n                }\r\n                else if (stage === \"stimulus\") {\r\n                    fullCounterpartIndexTrail = [indexTrail[0], indexTrail[1], \"answer\", 0];\r\n                    lastRow = (+ indexTrail[1]) === (testRows - 1);\r\n                }\r\n                else if (stage === \"answer\") {\r\n                    fullCounterpartIndexTrail = [indexTrail[0], indexTrail[1], \"stimulus\", 0, 0];\r\n                    lastRow = (+ indexTrail[1]) === (testRows - 1);\r\n                }\r\n\r\n\r\n\r\n                if(useGrid[i][j] != null) {\r\n                    columns.push(\r\n                        <GridCell\r\n                            key={j}\r\n                            type={type}\r\n                            copyToCounterpart={() => setDestToSource(fullCurrIndexTrail, fullCounterpartIndexTrail)}\r\n                            displaySwap={!lastRow && stage !== \"answer\" && colIndex % 2 === 0}\r\n                            swapWithNext={() => univSwapRows(rowIndex)}\r\n                            content={calcValFromIndexTrail([rowIndex, colIndex], grid)}\r\n                            stage={stage}\r\n                            multipleChoice={multipleChoice}\r\n                            correct={stage === \"answer\" && (correctAnswer === rowIndex)}\r\n                            setCorrectAnswer={answerChangeFunc}\r\n                            changeWidth={(e) => handleSceneColChange(e, rowIndex, colIndex)}\r\n                            changeHeight={(e) => handleSceneRowChange(e, rowIndex, colIndex)}\r\n                            penColor={penColor}\r\n                            setPixelColor={(newVal, row, col) => setPixelColor(newVal, row, col, rowIndex, colIndex)}\r\n                            setString={(newVal) => setString(newVal, rowIndex, colIndex)}\r\n                            problemCat={problemCat}\r\n                        />);\r\n                }\r\n            }\r\n            \r\n            rows.push(<div key={i} className=\"flex-container\">{columns}</div>);\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    function makeInto2dArray() {\r\n        let newArray = [];\r\n\r\n        for(let i = 0; i < Math.ceil(grid.length / 3); i++) {\r\n            newArray.push([]);\r\n            for(let j = 0; j < 3; j++) {\r\n                let scene = grid[i * 3 + j];\r\n                newArray[i].push(scene);\r\n            }\r\n        }\r\n\r\n        return newArray;\r\n    }\r\n\r\n    console.log(stage);\r\n    console.log(lockedVariables);\r\n    return (\r\n        <div>\r\n            <div id=\"options\">\r\n                {\r\n                    !((stage + \"-gridType\") in lockedVariables) &&\r\n                    <SelectList id={stage + \"-gridType\"} options={[\"pixels\", \"string\"]} selection={type} onChange={handleGridTypeChange}/>\r\n                }\r\n                {  \r\n                    stage === \"answer\" && !(\"answer-choice\" in lockedVariables) &&\r\n                    <NumberInput id={\"answer-choice\"} name=\"# Choices\" value={grid.length} onChange={handleAnswerLengthChange} />\r\n                }\r\n                {  \r\n                     !(stage === \"answer\") && !((stage + \"-row\") in lockedVariables) && problemCat !== \"arc\" &&\r\n                    <NumberInput id={stage + \"-row\"} name=\"# Rows\" value={grid.length} onChange={handleGridRowChange} />\r\n                }\r\n                {  \r\n                     !(stage === \"answer\") && !((stage + \"-row\") in lockedVariables) && problemCat === \"arc\" &&\r\n                    <NumberInput id={stage + \"-row\"} name=\"# Demonstrations\" value={grid.length} onChange={handleGridRowChange} />\r\n                }\r\n                {\r\n                    !(stage === \"answer\") && !((stage + \"-col\") in lockedVariables) &&\r\n                    <NumberInput id={stage + \"-col\"} name=\"# Cols\" value={grid[0].length} onChange={handleGridColChange} />\r\n                }\r\n            </div>\r\n            {generateGrid()}\r\n        </div>     \r\n    );\r\n}\r\n\r\nexport function GridCell(props) {\r\n    const { type, content, copyToCounterpart, swapWithNext, displaySwap, stage, multipleChoice, correct, setCorrectAnswer, changeWidth, changeHeight, penColor, setPixelColor, setString, problemCat} = props;\r\n\r\n    return (\r\n        <div>\r\n            {type === \"pixels\" &&\r\n                <PixelEditor \r\n                    pixels={content}\r\n                    changeHeight={changeHeight}\r\n                    changeWidth={changeWidth}\r\n                    penColor={penColor}\r\n                    setPixelColor={setPixelColor}\r\n                />\r\n            }\r\n            {type === \"string\" &&\r\n                    <TextEditor \r\n                        string={content}\r\n                        setString={setString}\r\n                    />\r\n            }\r\n            {stage === \"stimulus\" && (problemCat === \"bongard\") &&\r\n                <div>\r\n                    <SelectList options={[\"left\", \"right\", \"neither\"]} selection={[\"left\", \"right\", \"neither\"][correct]} onChange={(e) => setCorrectAnswer([\"left\", \"right\", \"neither\"].indexOf(e.target.value))} />\r\n                </div>\r\n            }\r\n            {(problemCat === \"arc\") && \r\n                <div>\r\n                    <button onClick={copyToCounterpart}> Copy to counterpart</button>\r\n                </div>\r\n            }\r\n            {(problemCat === \"arc\") && displaySwap && \r\n                <div>\r\n                    <button onClick={swapWithNext}>Swap with next</button>\r\n                </div>\r\n            }\r\n            {stage === \"answer\" && multipleChoice && !(problemCat !== \"bongard\") &&\r\n                <div>\r\n                    <label>\r\n                        <input\r\n                        type=\"checkbox\"\r\n                        checked={correct}\r\n                        onChange={setCorrectAnswer}\r\n                        />\r\n                        Correct\r\n                    </label>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function TextEditor(props) {\r\n    const { string, setString } = props;\r\n    return (\r\n        <div className=\"flex-child\">\r\n            <input type=\"text\" value={string} onChange={(e) => setString(e.target.value)} /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport function PixelEditor(props) {\r\n    const { pixels, changeHeight, changeWidth, penColor, setPixelColor} = props;\r\n    const [dragging, setDragging] = useState(false);\r\n    let componentRef = React.createRef()\r\n\r\n    function startDragging(e) {\r\n        e.preventDefault();\r\n        setDragging(true);\r\n    }\r\n\r\n    let rows = [];\r\n\r\n    for (let i = 0; i < pixels.length; i++) {\r\n        rows.push(<Row key={i} width={pixels[0].length} selectedColor={penColor} dragging={dragging} changeColor={(col, new_val) => setPixelColor(new_val, i, col)} pixelColors={pixels[i]} />);\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex-child\">\r\n            <div id=\"options\">\r\n                <NumberInput name=\"Width\" value={pixels[0].length} onChange={changeWidth} />\r\n                <NumberInput name=\"Height\" value={pixels.length} onChange={changeHeight} />\r\n            </div>\r\n            <div \r\n                id=\"pixels\" \r\n                onMouseEnter={() => setDragging(false)}\r\n                onMouseLeave={() => setDragging(false)}\r\n                onMouseDown={startDragging} \r\n                onMouseUp={() => setDragging(false)}>\r\n                {rows}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useRef } from 'react';\r\nimport \"../styles/editor.scss\";\r\nimport InputGrid from \"./DrawingPanel\";\r\nimport {CirclePicker} from \"react-color\";\r\nimport { exportComponentAsPNG } from \"react-component-export-image\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nexport const colors = [\"#000000\", \"#0068cf\", \"#ff3937\", \"#00c443\", \"#ffd631\", \"#a0a0a0\", \"#f916b1\", \"#ff7a2c\", \"#63d6fc\", \"#820f23\"]\r\n\r\nlet circleSize = 28\r\nlet circleSpacing = 14\r\n\r\nfunction twoDArrayCopy(arr) {\r\n    const rows = arr.length;\r\n    const cols = arr[0].length;\r\n    var new_arr = Array(arr.length).fill().map(() => Array(arr[0].length));\r\n    for(var i = 0; i < rows; i++) {\r\n        for(var j = 0; j < cols; j++) {\r\n            new_arr[i][j] = arr[i][j];\r\n        }\r\n    }\r\n    return new_arr;\r\n}\r\n\r\nfunction replaceItemsWithoutMutating(arr, row, col, new_val) {\r\n    var new_arr = twoDArrayCopy(arr);\r\n    new_arr[row][col] = new_val;\r\n\r\n    return new_arr;\r\n}\r\n\r\n// list arr -> \r\n// finds whatever value is located at indexTrail in startArray\r\nexport function calcValFromIndexTrail(indexTrail, startArray) {\r\n    let restrictedArr = startArray;\r\n    let index = 0;\r\n\r\n    while(indexTrail[index] != null) {\r\n        restrictedArr = restrictedArr[indexTrail[index]];\r\n        index += 1\r\n    }\r\n\r\n    return restrictedArr;\r\n}\r\n\r\n\r\nexport function NumberInput(props) {\r\n    return (\r\n        <div className=\"option\">\r\n            <input\r\n                type=\"number\"\r\n                className=\"panelInput\"\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n            />\r\n            <span className=\"inputLabel\" >{props.name}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function Editor() {\r\n\r\n    const [problemId, setProblemId] = useState(\"other-0\"); // identifier for the problem, saved in exported json\r\n    const [problemCat, setProblemCat] = useState(\"other\"); // category for the problem, may change the layout of the editor\r\n    const [defaultGridType, setDefaultGridType] = useState(\"pixels\"); // determines the type of newly created grids\r\n    const [multipleChoice, setMultipleChoice] = useState(false); // determines whether the question is multiple choice\r\n    \r\n    // the list of indices that lead to the currently displayed grid\r\n    // irrelevant when multiple grids are displayed at the same time\r\n    const [currentItemIndexTrail, setCurrentItemIndexTrail] = useState([\"context\", 0, null]); \r\n    \r\n    // information about the problem \r\n    const [problem, setProblem] = \r\n            useState({\"context\": [[[createGridCellByType(defaultGridType)]]], \r\n                     \"questions\": [{\"stimulus\": [[createGridCellByType(defaultGridType)]], \"answer\": [createGridCellByType(defaultGridType)], \"correct\": 0}]});\r\n\r\n\r\n    // color with which to modify pixel grids\r\n    const [penColor, setPenColor] = useState(colors[0]);\r\n    \r\n    // the locked variables for various different problem categories\r\n    const lockedVariables = {\r\n                                \"arc\": {\r\n                                        \"contextLength\": 1,\r\n                                        \"multipleChoice\": false,\r\n                                        \"defaultGridType\": \"pixels\",\r\n                                        \"context-col\": 2, \r\n                                        \"stimulus-col\": 1, \r\n                                        \"stimulus-row\": 1,\r\n                                        \"answer-choice\": 1, \r\n                                        \"context-gridType\": \"pixels\",\r\n                                        \"stimulus-gridType\": \"pixels\",\r\n                                        \"answer-gridType\": \"pixels\"\r\n                                    },\r\n                                \"bongard\": {\r\n                                        \"contextLength\": 2,\r\n                                        \"multipleChoice\": true,\r\n                                        \"defaultGridType\": \"pixels\",\r\n                                        \"context-col\": 2,\r\n                                        \"context-row\": 3,\r\n                                        \"stimulus-col\": 1,\r\n                                        \"stimulus-row\": 1, \r\n                                        \"answer-choice\": 3, \r\n                                        \"context-gridType\": \"pixels\",\r\n                                        \"stimulus-gridType\": \"pixels\",\r\n                                        \"answer-gridType\": \"string\",\r\n                                        \"answer-choices\": [\"left\", \"right\", \"neither\"]\r\n                                },\r\n                                \"letter-string\": {\r\n                                        \"contextLength\": 1,\r\n                                        \"multipleChoice\": false,\r\n                                        \"defaultGridType\": \"string\",\r\n                                        \"context-col\": 2, \r\n                                        \"stimulus-col\": 1, \r\n                                        \"stimulus-row\": 1,\r\n                                        \"answer-choice\": 1, \r\n                                        \"context-gridType\": \"string\",\r\n                                        \"stimulus-gridType\": \"string\",\r\n                                        \"answer-gridType\": \"string\"\r\n                                },\r\n                                \"other\": {}\r\n                            }\r\n    \r\n    const componentRef = useRef()\r\n\r\n    /*\r\n    handlers: STATE-DEPENDENT\r\n    inputs (fields, buttons) call handlers, which translates events into the correct format and calls setters\r\n    if conditions for modification are met\r\n    */\r\n\r\n    function handleFileUpload(e) {\r\n        const fileReader = new FileReader();\r\n        fileReader.readAsText(e.target.files[0], \"UTF-8\");\r\n        fileReader.onload = e => {\r\n            let content = JSON.parse(e.target.result);\r\n            if(\"context\" in content) {\r\n                setStateFromRegFileUpload(content);\r\n            } else {\r\n                setStateFromArcFileUpload(content);\r\n            }\r\n        };\r\n    }\r\n    \r\n    // list evt ->\r\n    // handles events from the SelectLists that change the gridType\r\n    function handleGridTypeChange(indexTrail, event) {\r\n        let newType = event.target.value;\r\n\r\n        let stage = calcStage(indexTrail);\r\n\r\n        if(!(stage + \"-gridType\" in lockedVariables[problemCat])) {\r\n            setGridType(indexTrail, newType);\r\n        }\r\n    }\r\n\r\n    // ->\r\n    // handles events from the checkbox that controls whether the question is multiple choice\r\n    function handleMultChoiceChange() {\r\n        if(\"multipleChoice\" in lockedVariables[problemCat]) {\r\n            setMultipleChoice(lockedVariables[problemCat][\"multipleChoice\"]);\r\n        } else {\r\n            setMultipleChoice(!multipleChoice);\r\n        }\r\n    }\r\n\r\n    // evt ->\r\n    // handles event from the SelectList that changes problem category\r\n    function handleCatChange(event) {\r\n        let newCat = event.target.value;\r\n\r\n        setLockedVariables(newCat);\r\n\r\n        setProblemCat(newCat);\r\n    }\r\n\r\n    // evt ->\r\n    // handles event from the SelectList that changes the default grid type\r\n    function handleDefaultGridTypeChange(event) {\r\n        let newGridType = event.target.value;\r\n\r\n        if(!(\"defaultGridType\" in lockedVariables[problemCat])) {\r\n            setDefaultGridType(newGridType);\r\n        }\r\n    }\r\n\r\n    // list evt -> \r\n    // handles event from input that changes number of rows in a grid\r\n    function handleGridRowChange(indexTrail, event) {\r\n        let newCount = applyBounds(parseInt(event.target.value));\r\n        let stage = calcStage(indexTrail);\r\n        if(!(stage + \"-row\" in lockedVariables[problemCat])) {\r\n            let gridType = calcGridType(calcValFromIndexTrail(indexTrail, problem));\r\n            setGridRowCount(indexTrail, newCount, () => createGridCellByType(gridType));\r\n        }\r\n    }\r\n\r\n    // list evt ->\r\n    // handles event from input that changes number of cols in a grid\r\n    function handleGridColChange(indexTrail, event) {\r\n        let newCount = applyBounds(parseInt(event.target.value));\r\n        let stage = calcStage(indexTrail);\r\n        if(!(stage + \"-col\" in lockedVariables[problemCat])) {\r\n            let gridType = calcGridType(calcValFromIndexTrail(indexTrail, problem));\r\n            setGridColCount(indexTrail, newCount, () => createGridCellByType(gridType));\r\n        }\r\n        \r\n    }\r\n\r\n    // list int -> \r\n    // handles event from checkboxes that change the correct answer\r\n    function handleCorrectAnswer(indexTrail, index) {\r\n        if(calcStage(indexTrail) === \"answer\" && multipleChoice) {\r\n            return setCorrectAnswer(indexTrail, index);\r\n        }\r\n    }\r\n\r\n    // list int int evt ->\r\n    // handles event from inputs that change the row count of a pixel grid (not the full grid)\r\n    function handleSceneRowChange(indexTrail, row, col, event) {\r\n        let rowCount = parseInt(event.target.value);\r\n        setRowCount(indexTrail, rowCount, row, col);\r\n    }\r\n\r\n    // list int int evt ->\r\n    // handles event from inputs that change the col count of a pixel grid (not the full grid)\r\n    function handleSceneColChange(indexTrail, row, col, event) {\r\n        let colCount = parseInt(event.target.value);\r\n        setColCount(indexTrail, colCount, row, col);\r\n    }\r\n\r\n    // evt ->\r\n    // handles event from input that changes the number of context grids\r\n    function handleContextLengthChange(event) {\r\n        let newLength = parseInt(event.target.value);\r\n        \r\n        if(!(\"contextLength\" in lockedVariables[problemCat])) {\r\n            setArrayLength([\"context\"], newLength, () => [[createGridCellByType(defaultGridType)]]);\r\n        }\r\n    }\r\n\r\n    // evt ->\r\n    // handles event from input that changes the number of questions\r\n    function handleQuestionLengthChange(event) {\r\n        let newLength = parseInt(event.target.value);\r\n        if(!(\"questionLength\" in lockedVariables[problemCat]) && !(\"answer-choices\" in lockedVariables[problemCat])) {\r\n            setArrayLength([\"questions\"], newLength, () => ({\"stimulus\": [[createGridCellByType(defaultGridType)]], \"answer\": [createGridCellByType(defaultGridType)], \"correct\": 0}));\r\n        } else if(!(\"questionLength\" in lockedVariables[problemCat])) {\r\n            setArrayLength([\"questions\"], newLength, () => ({\"stimulus\": [[createGridCellByType(defaultGridType)]], \"answer\": lockedVariables[problemCat][\"answer-choices\"], \"correct\": 0}));\r\n        }\r\n\r\n    }\r\n\r\n    // list evt ->\r\n    // handles event from input that changes the number of answer choices\r\n    function handleAnswerLengthChange(indexTrail, event) {\r\n        let newLength = parseInt(event.target.value);\r\n\r\n        if(!(\"questionLength\" in lockedVariables[problemCat])) {\r\n            if(newLength > 1 && !multipleChoice) {\r\n                setMultipleChoice(true);\r\n            } else if(newLength < 1) {\r\n                return\r\n            }\r\n\r\n            let gridType = calcGridType(calcValFromIndexTrail(indexTrail, problem));\r\n            setArrayLength(indexTrail, newLength, () => createGridCellByType(gridType));\r\n        }\r\n    }\r\n\r\n    /*\r\n    getters; STATE-DEPENDENT.\r\n    get important vaues from the state\r\n    */\r\n\r\n    // list -> int \r\n    // gets the correct answer for the question at indexTrail\r\n    function getCorrectAnswer(indexTrail) {\r\n        if(calcStage(indexTrail) === \"stimulus\" || calcStage(indexTrail) === \"answer\") {\r\n            return problem[indexTrail[0]][indexTrail[1]][\"correct\"];\r\n        }\r\n    }\r\n\r\n    /*\r\n    setters; STATE-DEPENDENT. set state variables based on given values.\r\n    */\r\n    function setDestToSource(indexTrailSource, indexTrailDest) {\r\n        let newProblem = {...problem};\r\n        let valToCopy = calcValFromIndexTrail(indexTrailSource, newProblem);\r\n        changeValFromIndexTrail(indexTrailDest, valToCopy, newProblem);\r\n        setProblem(newProblem);\r\n    }\r\n\r\n    function swapAandB(aIndexTrail, bIndexTrail) {\r\n        console.log(\"swapping\", aIndexTrail, bIndexTrail);\r\n        console.log(problem);\r\n        let newProblem = {...problem};\r\n        let aValue = calcValFromIndexTrail(aIndexTrail, newProblem);\r\n        let bValue = calcValFromIndexTrail(bIndexTrail, newProblem);\r\n        changeValFromIndexTrail(aIndexTrail, bValue, newProblem);\r\n        changeValFromIndexTrail(bIndexTrail, aValue, newProblem);\r\n        setProblem(newProblem);\r\n    }\r\n\r\n    // list int ->\r\n    // sets the correct answer for the question at indexTrail to index\r\n    function setCorrectAnswer(indexTrail, index) {\r\n        console.log(\"setting correct answer\");\r\n        let newProblem = {...problem};\r\n        let augIndexTrail = [...indexTrail];\r\n        augIndexTrail[2] = \"correct\";\r\n        changeValFromIndexTrail(augIndexTrail, index, newProblem)\r\n\r\n        setProblem(newProblem);\r\n        return true;\r\n    }\r\n\r\n    // list string int int ->\r\n    // changes the string at the given (gridRow, gridCol)\r\n    function setString(indexTrail, newVal, gridRow, gridCol) {\r\n        let grid = calcValFromIndexTrail(indexTrail, problem);\r\n        let copyGrid = [...grid];\r\n        changeValFromIndexTrail([gridRow, gridCol], newVal, copyGrid);\r\n\r\n        setProblemGrid(indexTrail, copyGrid);\r\n    }\r\n\r\n    // list int int int int int ->\r\n    // replaces the pixel (sceneRow, sceneCol) in the scene at (gridRow, gridCol) with newVal\r\n    function setPixelColor(indexTrail, newVal, sceneRow, sceneCol, gridRow, gridCol) {\r\n        let grid = calcValFromIndexTrail(indexTrail, problem);\r\n        let newArray = replaceItemsWithoutMutating(calcValFromIndexTrail([gridRow, gridCol], grid), sceneRow, sceneCol, newVal);\r\n        let copyGrid = [...grid];\r\n        changeValFromIndexTrail([gridRow, gridCol], newArray, copyGrid);\r\n\r\n        setProblemGrid(indexTrail, copyGrid);\r\n    }\r\n\r\n    // list int int int ->\r\n    // sets the number of columns for the pixel grid at (r, c) to colCount\r\n    function setColCount(indexTrail, colCount, r, c) {\r\n        let grid = calcValFromIndexTrail(indexTrail, problem);\r\n        let copyArr = changeColCount(calcValFromIndexTrail([r, c], grid), colCount, () => 0);\r\n\r\n        let copyGrid = [...grid]; \r\n        changeValFromIndexTrail([r, c], copyArr, copyGrid);\r\n        setProblemGrid(indexTrail, copyGrid);\r\n    }\r\n\r\n    // list int int int ->\r\n    // sets the number of columns for the pixel grid at (r, c) to rowCount\r\n    function setRowCount(indexTrail, rowCount, r, c) {\r\n        let grid = calcValFromIndexTrail(indexTrail, problem);\r\n        let copyArr = changeRowCount(calcValFromIndexTrail([r, c], grid), rowCount, () => 0);\r\n\r\n        let copyGrid = [...grid];\r\n        changeValFromIndexTrail([r, c], copyArr, copyGrid);\r\n        setProblemGrid(indexTrail, copyGrid);\r\n    }\r\n\r\n    // list int [() => gridElement] ->\r\n    // changes the length of an array to newLength, if newLength is longer, the new elements are given by generator\r\n    function setArrayLength(indexTrail, newLength, generator, alt) {\r\n        let arr = calcValFromIndexTrail(indexTrail, problem)\r\n        console.log(generator())\r\n        let copyArr = [...arr];\r\n        let difference = newLength - copyArr.length;\r\n\r\n        for(var i = 0; i < Math.abs(difference); i++) {\r\n            if(difference < 0) {\r\n                copyArr.pop();\r\n            } else if(difference > 0) {\r\n                copyArr.push(generator());\r\n            }\r\n        }\r\n        \r\n        console.log(copyArr);\r\n\r\n        let newProblem = setProblemGrid(indexTrail, copyArr, alt);\r\n\r\n        return newProblem;\r\n    }\r\n    \r\n    // list int [() => gridElement] ->\r\n    // changes the number of rows in the 2d array at indexTrail, new elements are given by generator\r\n    function setGridRowCount(indexTrail, newRowCount, generator, alt) {\r\n        let prob = probFromAlt(alt);\r\n        let arr = calcValFromIndexTrail(indexTrail, prob);\r\n        let copyArr = changeRowCount(arr, newRowCount, generator);\r\n        \r\n        return setProblemGrid(indexTrail, copyArr, alt);\r\n    }\r\n\r\n    // list int [() => gridElement] ->\r\n    // changes the number of cols in the 2d array at indexTrail, new elements are given by generator\r\n    function setGridColCount(indexTrail, newColCount, generator, alt) {\r\n        let prob = probFromAlt(alt);\r\n        let arr = calcValFromIndexTrail(indexTrail, prob);\r\n        let copyArr = changeColCount(arr, newColCount, generator);\r\n        \r\n        return setProblemGrid(indexTrail, copyArr, alt);\r\n    }\r\n\r\n    // list grid ->\r\n    // replaces the grid at indexTrail with newGrid\r\n    function setProblemGrid(indexTrail, newGrid, alt) {\r\n        let newProblem = probFromAlt(alt);\r\n        changeValFromIndexTrail(indexTrail, newGrid, newProblem);\r\n        if(typeof alt === 'undefined') {\r\n            setProblem(newProblem);\r\n        }\r\n\r\n        return newProblem;\r\n    }\r\n\r\n    // int string/int ->\r\n    // sets the indexTrail to the default trail that ends with value at index\r\n    function setIndexTrail(index, value) {\r\n        if(!isNaN(value)) {\r\n            value = parseInt(value);\r\n        } \r\n        let newIndexTrail = [...currentItemIndexTrail];\r\n        newIndexTrail[index] = value;\r\n\r\n        for(let i = index + 1; i < 3; i++) {\r\n            newIndexTrail[i] = null;\r\n        }\r\n\r\n        newIndexTrail = populateIndexTrail(newIndexTrail);\r\n\r\n        setCurrentItemIndexTrail(newIndexTrail);\r\n    }\r\n\r\n    // list string ->\r\n    // sets the grid at indexTrail to have type newType, clears grid of whatever it contains\r\n    function setGridType(indexTrail, newType, alt) {\r\n        let prob = probFromAlt(alt);\r\n        let grid = calcValFromIndexTrail(indexTrail, prob);\r\n        let newGrid;\r\n        \r\n        console.log(alt);\r\n        console.log(grid);\r\n\r\n        if(calcStage(indexTrail) === \"answer\") {\r\n            newGrid = createGrid(grid.length, null, () => createGridCellByType(newType));\r\n            return setProblemGrid(indexTrail, newGrid, alt);\r\n        } else {\r\n            newGrid = createGrid(grid.length, grid[0].length, () => createGridCellByType(newType));\r\n            return setProblemGrid(indexTrail, newGrid, alt);   \r\n        }\r\n    }\r\n\r\n    function setStateFromRegFileUpload(content) {\r\n        let newProblemContext = []\r\n        for(let i in content[\"context\"]) {\r\n            let contextGrid = calc2dArrayFromDict(content[\"context\"][i]);\r\n            newProblemContext.push(contextGrid)\r\n        }\r\n        let newProblemQuestions = []\r\n        let newMultipleChoice;\r\n        for(let i in content[\"questions\"]) {\r\n            let stimulusGrid = calc2dArrayFromDict(content[\"questions\"][i][\"stimulus\"]);\r\n            let answers;\r\n            let correct;\r\n            if(content[\"questions\"][i][\"choices\"].length === 0) {\r\n                answers = [content[\"questions\"][i][\"answer\"]];\r\n                correct = 0;\r\n                newMultipleChoice = false;\r\n            } else {\r\n                answers = content[\"questions\"][i][\"choices\"];\r\n                correct = content[\"questions\"][i][\"answer\"];\r\n                newMultipleChoice = true;\r\n            }\r\n            newProblemQuestions.push({\"stimulus\": stimulusGrid, \"answer\": answers, \"correct\": correct})\r\n        }\r\n        let newProblem = {\"context\": newProblemContext, \"questions\": newProblemQuestions};\r\n        setProblem(newProblem)\r\n        setProblemId(content[\"id\"]);\r\n        setProblemCat(content[\"category\"]);\r\n        setMultipleChoice(newMultipleChoice);\r\n    }\r\n\r\n    function setStateFromArcFileUpload(content) {\r\n        let contextGrid = [];\r\n        for(let i in content[\"train\"]) {\r\n            let input_grid = content[\"train\"][i][\"input\"];\r\n            let output_grid = content[\"train\"][i][\"output\"];\r\n            contextGrid.push([input_grid, output_grid])\r\n        }\r\n        let newProblemContext = [contextGrid];\r\n        let newProblemQuestions = []\r\n        for(let i in content[\"test\"]) {\r\n            let stimulusGrid = [[content[\"test\"][i][\"input\"]]];\r\n            let answer = [content[\"test\"][i][\"output\"]];\r\n            let correct = 0;\r\n            newProblemQuestions.push({\"stimulus\": stimulusGrid, \"answer\": answer, \"correct\": correct});\r\n        }\r\n        let newProblem = {\"context\": newProblemContext, \"questions\": newProblemQuestions};\r\n    \r\n        setProblem(newProblem)\r\n        setProblemId(\"arc-0\");\r\n        setProblemCat(\"arc\");\r\n        setMultipleChoice(false);\r\n    }\r\n\r\n    function setDefaultProblem() {\r\n        let newProblem = {\"context\": [[[createGridCellByType(defaultGridType)]]], \r\n                     \"questions\": [{\"stimulus\": [[createGridCellByType(defaultGridType)]], \"answer\": [createGridCellByType(defaultGridType)], \"correct\": 0}]}\r\n        setLockedVariables(problemCat, newProblem);\r\n\r\n    }\r\n\r\n    // string ->\r\n    // sets all variables to their locked values for the given category \r\n    function setLockedVariables(cat, newProblem = 0) {\r\n        if(newProblem === 0) {\r\n            newProblem = {... problem};\r\n        }\r\n        for(let key in lockedVariables[cat]) {\r\n            let keySplit = key.split(\"-\")\r\n            if(key === \"contextLength\") {\r\n                newProblem = setArrayLength([\"context\"], lockedVariables[cat][\"contextLength\"], () => [[createGridCellByType(defaultGridType)]], newProblem);\r\n            } else if(key === \"multipleChoice\") {\r\n                setMultipleChoice(lockedVariables[cat][\"multipleChoice\"]);\r\n            } else if(key === \"defaultGridType\") {\r\n                setDefaultGridType(lockedVariables[cat][\"defaultGridType\"]);\r\n            } else if(keySplit[0] === \"context\" && [\"row\", \"col\"].includes(keySplit[1])) {\r\n                let len = newProblem[\"context\"].length;\r\n                for(let gridIndex = 0; gridIndex < len; gridIndex++) {\r\n                    let gridType = calcGridType(calcValFromIndexTrail([\"context\", gridIndex], newProblem));\r\n                    if(keySplit[1] === \"row\") {\r\n                        newProblem = setGridRowCount([\"context\", gridIndex], lockedVariables[cat][\"context-row\"], () => createGridCellByType(gridType), newProblem);\r\n                    } else if(keySplit[1] === \"col\") {\r\n                        newProblem = setGridColCount([\"context\", gridIndex], lockedVariables[cat][\"context-col\"], () => createGridCellByType(gridType), newProblem);\r\n                    }      \r\n                }\r\n            } else if([\"stimulus\", \"answer\"].includes(keySplit[0]) && [\"row\", \"col\"].includes(keySplit[0])) {\r\n                let len = newProblem[\"questions\"].length;\r\n                for(let gridIndex = 0; gridIndex < len; gridIndex++) {\r\n                    let gridType = calcGridType(calcValFromIndexTrail([\"context\", gridIndex], newProblem));\r\n                    if(keySplit[1] === \"row\") {\r\n                        newProblem = setGridRowCount([\"questions\", gridIndex, keySplit[0]], lockedVariables[cat][keySplit[0] + \"-row\"], () => createGridCellByType(gridType), newProblem);\r\n                    } else if(keySplit[1] === \"col\") {\r\n                        newProblem = setGridColCount([\"questions\", gridIndex, keySplit[0]], lockedVariables[cat][keySplit[0] + \"-col\"], () => createGridCellByType(gridType), newProblem);\r\n                    }   \r\n                }\r\n\r\n            } else if(keySplit[0] === \"context\" && keySplit[1] === \"gridType\") {\r\n                let len = newProblem[\"context\"].length;\r\n                for(let gridIndex = 0; gridIndex < len; gridIndex++) {\r\n                    console.log(newProblem[\"context\"][gridIndex]);\r\n                    newProblem = setGridType([\"context\", gridIndex], lockedVariables[cat][\"context-gridType\"], newProblem);\r\n                }\r\n            } else if([\"stimulus\", \"answer\"].includes(keySplit[0]) && keySplit[1] === \"gridType\") {\r\n                let len = newProblem[\"questions\"].length;\r\n                for(let gridIndex = 0; gridIndex < len; gridIndex++) {\r\n                    newProblem = setGridType([\"questions\", gridIndex, keySplit[0]], lockedVariables[cat][keySplit[0] + \"-gridType\"], newProblem);\r\n                }\r\n            } else if(keySplit[0] === \"answer\" && keySplit[1] === \"choice\") {\r\n                let len = newProblem[\"questions\"].length;\r\n                for(let gridIndex = 0; gridIndex < len; gridIndex++) {\r\n                    let gridType = calcGridType(calcValFromIndexTrail([\"questions\", gridIndex, \"answer\"], newProblem));\r\n                    newProblem = setArrayLength([\"questions\", gridIndex, \"answer\"], lockedVariables[cat][\"answer-choice\"], () => createGridCellByType(gridType), newProblem);\r\n                }\r\n            } else if(keySplit[0] === \"answer\" && keySplit[1] === \"choices\") {\r\n                let len = newProblem[\"questions\"].length;\r\n                let choiceLen = newProblem[\"questions\"][0][\"answer\"].length;\r\n                for(let gridIndex = 0; gridIndex < len; gridIndex++) {\r\n                    for(let choiceIndex = 0; choiceIndex < choiceLen; choiceIndex++) {\r\n                        newProblem[\"questions\"][gridIndex][\"answer\"][choiceIndex] = lockedVariables[cat][\"answer-choices\"][choiceIndex];\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        setProblem(newProblem);\r\n    }\r\n\r\n    /*\r\n    calculators; STATE-INDEPENDENT. calculates something based on given values. (sort of like state-independent getters)\r\n    */\r\n\r\n    // list ->\r\n    // Calculates the stage (\"context\", \"stimulus\", or \"answer\") based on the given indexTrail\r\n    function calcStage(indexTrail) {\r\n        if(indexTrail.includes(\"context\")) {\r\n            return \"context\";\r\n        } else if(indexTrail.includes(\"stimulus\")) {\r\n            return \"stimulus\";\r\n        } else if(indexTrail.includes(\"answer\")) {\r\n            return \"answer\";\r\n        } else {\r\n            return false; \r\n        }\r\n    }\r\n\r\n    // list -> \r\n    // given a grid of scenes/strings, deduces whether it is a set of \r\n    // answer choices (answer choices have one fewer dimension)\r\n    function calcIsAnswerGrid(grid) {\r\n        let restrictedArr = grid;\r\n        let dimCounter = 0;\r\n        while(restrictedArr.constructor === Array) {\r\n            restrictedArr = restrictedArr[0]\r\n            dimCounter += 1;\r\n        }\r\n        return (dimCounter % 2 === 1);\r\n    }\r\n\r\n    // arr ->\r\n    // examines array elements to see if it is a grid of strings or scenes\r\n    function calcGridType(gridGiven) {\r\n        let gridElement;\r\n\r\n        if(calcIsAnswerGrid(gridGiven)) {\r\n            gridElement = gridGiven[0];\r\n        } else {\r\n            gridElement = gridGiven[0][0];\r\n        }\r\n\r\n        if(typeof gridElement === 'string') {\r\n            return \"string\";\r\n        } else if(gridElement.constructor === Array) {\r\n            return \"pixels\";\r\n        }\r\n    }\r\n\r\n    function calc2dArrayFromDict(dict) {\r\n        let grid = []\r\n        let num_cols = dict[\"cols\"]\r\n        for(let i in dict[\"items\"]) {\r\n            let row_index = Math.floor(i / num_cols);\r\n            \r\n            // start a new row if necessary\r\n            if(row_index >= grid.length) {\r\n                grid.push([]);\r\n            }\r\n            grid[row_index].push(dict[\"items\"][i]);\r\n        }\r\n\r\n        return grid;\r\n    }\r\n    \r\n    /*\r\n    changers & creators; STATE-INDEPENDENT. create or change objects based on given quantities, \r\n    do not read from or write to state. (sort of like state-independent setters)\r\n    */\r\n\r\n    // list int [() => any] -> arr\r\n    // add or substact rows from arr so that the count matches newRowCount, if new rows are being added,\r\n    // generate new entries using generator\r\n    function changeRowCount(arr, newRowCount, generator) {\r\n        let oldRowCount = arr.length;\r\n        let colCount = arr[0].length;\r\n        let copyArr = twoDArrayCopy(arr);\r\n        let difference = newRowCount - oldRowCount;\r\n\r\n        for(var i = 0; i < Math.abs(difference); i++) {\r\n            if(difference < 0) {\r\n                copyArr.pop();\r\n            } else if(difference > 0) {\r\n                var pushArray = Array(colCount).fill().map(generator);\r\n                copyArr.push(pushArray);\r\n            }\r\n        }\r\n\r\n        return copyArr;\r\n    }\r\n\r\n    // list int [() => any] -> arr\r\n    // add or substract cols from arr so that the count matches newColCount, if new cols are being added,\r\n    // generate new entries using generator\r\n    function changeColCount(arr, newColCount, generator) {\r\n        let rowCount = arr.length;\r\n        let oldColCount = arr[0].length;\r\n        let copyArr = twoDArrayCopy(arr);\r\n        let difference = newColCount - oldColCount;\r\n\r\n        for(var i = 0; i < rowCount; i++) {\r\n            for(var j = 0; j < Math.abs(difference); j++) {\r\n                if(difference < 0) {\r\n                    copyArr[i].pop();\r\n                } else if(difference > 0) {\r\n                    copyArr[i].push(generator());\r\n                }\r\n            }\r\n        }\r\n\r\n        return copyArr;\r\n    }\r\n\r\n    // list any arr -> arr\r\n    // overwrite the value at arr[indexTrail] with value \r\n    function changeValFromIndexTrail(indexTrail, value, arr) {\r\n        let index = 0;\r\n        let restrictedArr = arr;\r\n\r\n        while(indexTrail[index + 1] != null) {\r\n            restrictedArr = restrictedArr[indexTrail[index]];\r\n            index += 1; \r\n        }\r\n        restrictedArr[indexTrail[index]] = value;       \r\n    }\r\n    \r\n    // int int [() => any]\r\n    // create a new grid with dimensions (rowCount, colCount) where empty spots are given by generator\r\n    function createGrid(rowCount, colCount, generator) {\r\n        if(colCount == null) {\r\n            return Array(rowCount).fill().map(generator);\r\n        } else {\r\n            return Array(rowCount).fill().map(() => Array(colCount).fill().map(generator));\r\n        }\r\n        \r\n    }\r\n\r\n    // string -> any\r\n    // creates a grid square depending on type\r\n    function createGridCellByType(type) {\r\n        if(type === \"pixels\") {\r\n            return Array(6).fill().map(() => Array(6).fill(0));\r\n        } else if(type === \"string\") {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    \r\n    /*\r\n    helper functions\r\n    */\r\n\r\n    function probFromAlt(alt) {\r\n        let prob;\r\n        if(typeof alt === \"undefined\") {\r\n            prob = {...problem};\r\n        } else {\r\n            prob = alt;\r\n        }\r\n\r\n        return prob;\r\n    }\r\n\r\n    // list -> list\r\n    // populates an indexTrail with null values with default values\r\n    function populateIndexTrail(indexTrail) {\r\n        if(indexTrail[1] == null) {\r\n            indexTrail[1] = 0;\r\n        } \r\n        if(indexTrail[2] == null) {\r\n            indexTrail[2] = indexTrail[0] === \"context\" ? null : \"stimulus\";\r\n        }\r\n\r\n        return indexTrail;\r\n    }\r\n\r\n    // int -> int\r\n    // returns number if it is in bounds, otherwise, returns the closest value to number\r\n    // within the bounds\r\n    function applyBounds(number) {\r\n        if(number < 1) {\r\n            number = 1;\r\n        } else if(number > 30) {\r\n            number = 30;\r\n        }\r\n\r\n        return number;\r\n    }\r\n\r\n    /*\r\n    synthesizers: STATE-DEPENDENT. Generates some output based on a combination of state variables\r\n    e.g. JSON file representing problem, or a set of InputGrids to edit the problem \r\n    */\r\n\r\n    function makeARCJson() {\r\n        let ARCJson = {\"train\": [], \"test\": []}\r\n        let examples = problem[\"context\"][0]\r\n\r\n        for(let row_index in examples) {\r\n            let row = examples[row_index];\r\n            let prob = {\"input\": row[0], \"output\": row[1]};\r\n            ARCJson[\"train\"].push(prob);\r\n        }\r\n\r\n        for(let q_index in problem[\"questions\"]) {\r\n            let question = problem[\"questions\"][q_index]\r\n            let prob = {\r\n                        \"input\": question[\"stimulus\"][0][0], \r\n                        \"output\": question[\"answer\"][0]\r\n            };\r\n            ARCJson[\"test\"].push(prob);\r\n        }\r\n\r\n        return ARCJson;  \r\n    }\r\n\r\n    function exportJSON() {\r\n        let file = {}\r\n        let grid;\r\n        let rows;\r\n        let cols;\r\n        let items;\r\n\r\n        if(problemCat === \"arc\") {\r\n            file = makeARCJson()\r\n        } else {\r\n            file[\"category\"] = problemCat;\r\n            file[\"id\"] = problemId;\r\n            file[\"context\"] = [];\r\n            file[\"mode\"] = multipleChoice ? \"discriminate\" : \"generate\";\r\n            file[\"answer_type\"] = \"categorical_list\";\r\n\r\n            for(let gridIndex in problem[\"context\"]) {\r\n                grid = problem[\"context\"][gridIndex];\r\n                rows = grid.length;\r\n                cols = grid[0].length;\r\n                items = grid.flat()\r\n                file[\"context\"].push({\"rows\": rows, \"cols\": cols, \"type\": \"categorical_list\", \"items\": items});\r\n            }\r\n            file[\"questions\"] = [];\r\n            let stimulus;\r\n            let choices;\r\n            let answer;\r\n            for(let gridIndex in problem[\"questions\"]) {\r\n                stimulus = problem[\"questions\"][gridIndex][\"stimulus\"];\r\n                rows = stimulus.length;\r\n                cols = stimulus[0].length;\r\n                items = stimulus.flat();\r\n                choices = multipleChoice ? problem[\"questions\"][gridIndex][\"answer\"] : [];\r\n                answer = multipleChoice ? problem[\"questions\"][gridIndex][\"correct\"] : problem[\"questions\"][gridIndex][\"answer\"][0];\r\n\r\n                file[\"questions\"].push({\"stimulus\": {\"rows\": rows, \"cols\": cols, \"items\": items, \"type\": \"categorical_list\"},\r\n                                        \"choices\": choices,\r\n                                        \"answer\": answer})\r\n            }\r\n        }\r\n\r\n        const json = JSON.stringify(file);\r\n        const blob = new Blob([json],{type:'application/json'});\r\n\r\n        const href = URL.createObjectURL(blob);\r\n\r\n        saveAs(href);\r\n\r\n        /*\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = \"problem.json\";\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        */\r\n    }\r\n    /*\r\n    <label>\r\n        ID:\r\n        <input type=\"text\" value={problemId} onChange={(e) => setProblemId(e.target.value)} /> \r\n    </label>\r\n    */\r\n    return (\r\n        <div id=\"editor\" ref={componentRef}>\r\n            <h1>ARC Editor</h1>\r\n            <p>{false && JSON.stringify(problem)}</p>\r\n            <h2>Problem data</h2>\r\n            <div id=\"options\">\r\n                <label>\r\n                    Category:\r\n                    <SelectList id=\"category\" options={Object.keys(lockedVariables)} selection={problemCat} onChange={handleCatChange}/>\r\n                    \r\n                </label>\r\n                \r\n                {\r\n                    !(\"defaultGridType\" in lockedVariables[problemCat]) &&\r\n                    <label>\r\n                        Default grid cell type:\r\n                        <SelectList id=\"gridCellType\" options={[\"pixels\", \"string\"]} selection={defaultGridType} onChange={handleDefaultGridTypeChange}/>\r\n                    </label>   \r\n                }\r\n            </div>\r\n            <FileUpload handleChange={handleFileUpload} />\r\n            <button onClick={setDefaultProblem}>Clear</button>\r\n            <div id=\"options\" className=\"addPadding\">\r\n                {\r\n                    !(\"contextLength\" in lockedVariables[problemCat]) &&\r\n                    <NumberInput name=\"# Context\" value={problem[\"context\"].length} onChange={handleContextLengthChange} />\r\n                }\r\n                {\r\n                    (![\"arc\", \"letter-string\", \"bongard\"].includes(problemCat)) &&\r\n                    <NumberInput name=\"# Questions\" value={problem[\"questions\"].length} onChange={handleQuestionLengthChange} />\r\n                }\r\n                \r\n            </div>\r\n            <GridMenus \r\n                indexTrail={currentItemIndexTrail} \r\n                setIndexTrail={setIndexTrail} \r\n                problemCat={problemCat} \r\n                gridType={calcGridType(calcValFromIndexTrail(currentItemIndexTrail, problem))}\r\n                problem={problem}\r\n                setPenColor={setPenColor}\r\n                penColor={penColor}   \r\n            />\r\n            <div>\r\n                {\r\n                    !(\"multipleChoice\" in lockedVariables[problemCat]) &&\r\n                    <label>\r\n                        <input\r\n                        id=\"multipleChoice\"\r\n                        type=\"checkbox\"\r\n                        checked={multipleChoice}\r\n                        onChange={handleMultChoiceChange}\r\n                        />\r\n                        Multiple Choice\r\n                    </label>\r\n                }\r\n            </div>\r\n            <div>\r\n                <GridViewer\r\n                    problemCat={problemCat}\r\n                    problem={problem}\r\n                    currentItemIndexTrail={currentItemIndexTrail}\r\n                    calcStage={calcStage}\r\n                    calcGridType={calcGridType}\r\n                    lockedVariables={lockedVariables[problemCat]}\r\n                    handleGridTypeChange={handleGridTypeChange}\r\n                    handleAnswerLengthChange={handleAnswerLengthChange}\r\n                    handleQuestionLengthChange={handleQuestionLengthChange}\r\n                    handleCorrectAnswer={handleCorrectAnswer}\r\n                    getCorrectAnswer={getCorrectAnswer}\r\n                    multipleChoice={multipleChoice}\r\n                    handleGridRowChange={handleGridRowChange}\r\n                    handleGridColChange={handleGridColChange}\r\n                    handleSceneRowChange={handleSceneRowChange}\r\n                    handleSceneColChange={handleSceneColChange}\r\n                    penColor={penColor}\r\n                    setPixelColor={setPixelColor}\r\n                    setString={setString}\r\n                    setDestToSource={setDestToSource}\r\n                    swapAandB={swapAandB}\r\n                />\r\n                <button onClick={exportJSON} className=\"button\">Export JSON</button>\r\n                <button onClick={() => exportComponentAsPNG(componentRef)}>Export As PNG</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction FileUpload(props) {\r\n    const {handleChange} = props;\r\n    return (\r\n        <div>\r\n            <h3>Upload problem file</h3>\r\n            <input type=\"file\" onChange={handleChange} />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport function GridViewer(props) {\r\n    const { problemCat, problem, currentItemIndexTrail, calcStage, calcGridType, lockedVariables, \r\n            handleGridTypeChange, handleAnswerLengthChange, handleQuestionLengthChange, handleCorrectAnswer, getCorrectAnswer, multipleChoice,\r\n            handleGridRowChange, handleGridColChange, handleSceneRowChange, handleSceneColChange, \r\n            penColor, setPixelColor, setString, setDestToSource, swapAandB } = props;\r\n    \r\n    function bongardLayout() {\r\n        let leftIndexTrails = [[\"context\", 0]];\r\n        let rightIndexTrails = [[\"context\", 1]];\r\n        let bottomIndexTrails = [];\r\n\r\n        for(let gridIndex in problem[\"questions\"]) {\r\n            bottomIndexTrails.push([\"questions\", gridIndex, \"stimulus\"]);\r\n        }\r\n\r\n        let [leftSide, rightSide, bottomSide] = panelsFromIndexTrailLists([leftIndexTrails, rightIndexTrails, bottomIndexTrails]);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"flex-container\">\r\n                <div>\r\n                    <h3>Category 1</h3>\r\n                    {leftSide}\r\n                </div>\r\n                <div>\r\n                    <h3>Category 2</h3>\r\n                    {rightSide}\r\n                </div>\r\n                </div>\r\n                <NumberInput name=\"# Tests\" value={problem[\"questions\"].length} onChange={handleQuestionLengthChange} />\r\n                <div className=\"flex-container\">\r\n                    {bottomSide}\r\n                </div>\r\n            </div> \r\n        );\r\n    }\r\n\r\n    function panelsFromIndexTrailLists(indexTrailLists) {\r\n        let allIndexTrails = [];\r\n        let panels = [];\r\n        for(let i in indexTrailLists) {\r\n            allIndexTrails = allIndexTrails.concat(indexTrailLists[i]);\r\n            panels.push([]);\r\n        }\r\n\r\n        for(let i = 0; i < allIndexTrails.length; i++) {\r\n            let indexTrail = allIndexTrails[i];\r\n\r\n            let activePanel;\r\n            for(let j = 0; j < indexTrailLists.length; j++) {\r\n                if(indexTrailLists[j].includes(indexTrail)) {\r\n                    activePanel = panels[j];\r\n                }\r\n            }\r\n\r\n            let grid = calcValFromIndexTrail(indexTrail, problem);\r\n            \r\n            let answerIndexTrail = [indexTrail[0], indexTrail[1], \"answer\"]\r\n            activePanel.push(\r\n                <InputGrid\r\n                    problemCat={problemCat}\r\n                    grid={grid}\r\n                    contextRows={problem[\"context\"][0].length}\r\n                    testRows={problem[\"questions\"].length}\r\n                    indexTrail={indexTrail}\r\n                    setDestToSource={(srcIT, dstIT) => setDestToSource(srcIT, dstIT)}\r\n                    swapAandB={(a, b) => swapAandB(a, b)}\r\n                    stage={calcStage(indexTrail)}\r\n                    type={calcGridType(grid)}\r\n                    lockedVariables={lockedVariables}\r\n                    handleGridTypeChange={(evt) => handleGridTypeChange(indexTrail, evt)}\r\n                    handleGridRowChange={(e) => handleGridRowChange(indexTrail, e)}\r\n                    handleGridColChange={(e) => handleGridColChange(indexTrail, e)}\r\n                    handleAnswerLengthChange={(e) => handleAnswerLengthChange(indexTrail, e)}\r\n                    correctAnswer={getCorrectAnswer(indexTrail)} \r\n                    setCorrectAnswer={(idx) => handleCorrectAnswer(answerIndexTrail, idx)} \r\n                    multipleChoice={multipleChoice} \r\n                    handleSceneColChange={(e, r, c) => handleSceneColChange(indexTrail, r, c, e)} \r\n                    handleSceneRowChange={(e, r, c) => handleSceneRowChange(indexTrail, r, c, e)}\r\n                    penColor={penColor}\r\n                    setPixelColor={(color, sr, sc, gr, gc) => setPixelColor(indexTrail, color, sr, sc, gr, gc)} \r\n                    setString={(str, gr, gc) => setString(indexTrail, str, gr, gc)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return panels;\r\n    }\r\n\r\n    function arcLayout() {\r\n        let leftSide = [];\r\n        let rightSide = [];\r\n        let leftIndexTrails = [[\"context\", 0]]\r\n        let rightIndexTrails = [];\r\n        \r\n        for(let gridIndex in problem[\"questions\"]) {\r\n            rightIndexTrails.push([\"questions\", gridIndex, \"stimulus\"]);\r\n            rightIndexTrails.push([\"questions\", gridIndex, \"answer\"]);\r\n        }\r\n\r\n        [leftSide, rightSide] = panelsFromIndexTrailLists([leftIndexTrails, rightIndexTrails]);\r\n\r\n    \r\n        let modifiedRightSide = [];\r\n        for(let i = 0; i < rightSide.length; i = i + 2) {\r\n            modifiedRightSide.push(\r\n                <div className=\"flex-container\">\r\n                    {[rightSide[i], rightSide[i + 1]]}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"flex-container\">\r\n                <div>\r\n                    <h3>Demonstrations</h3>\r\n                    {leftSide}\r\n                </div>\r\n                <div>\r\n                    <h3>Tests</h3>\r\n                    <NumberInput name=\"# Tests\" value={problem[\"questions\"].length} onChange={handleQuestionLengthChange} />\r\n                    {modifiedRightSide}\r\n                </div>\r\n            </div>\r\n        );  \r\n\r\n    }\r\n\r\n    function makeInputGrids() {\r\n        if(problemCat === \"arc\") {\r\n            return arcLayout();\r\n        } else if(problemCat === \"bongard\") {\r\n            return bongardLayout();\r\n        }  else if(problemCat === \"letter-string\") {\r\n            return arcLayout();\r\n        } else {\r\n            let inputGrids = [];\r\n            let grid = calcValFromIndexTrail(currentItemIndexTrail, problem);\r\n            inputGrids.push(<InputGrid \r\n                problemCat={problemCat}\r\n                grid={grid}\r\n                indexTrail={currentItemIndexTrail}\r\n                stage={calcStage(currentItemIndexTrail)}\r\n                type={calcGridType(grid)}\r\n                lockedVariables={lockedVariables}\r\n                handleGridTypeChange={(val) => handleGridTypeChange(currentItemIndexTrail, val)}\r\n                handleGridRowChange={(e) => handleGridRowChange(currentItemIndexTrail, e)}\r\n                handleGridColChange={(e) => handleGridColChange(currentItemIndexTrail, e)}\r\n                handleAnswerLengthChange={(e) => handleAnswerLengthChange(currentItemIndexTrail, e)}\r\n                correctAnswer={getCorrectAnswer(currentItemIndexTrail)} \r\n                setCorrectAnswer={(idx) => handleCorrectAnswer(currentItemIndexTrail, idx)} \r\n                multipleChoice={multipleChoice} \r\n                handleSceneColChange={(e, r, c) => handleSceneColChange(currentItemIndexTrail, r, c, e)} \r\n                handleSceneRowChange={(e, r, c) => handleSceneRowChange(currentItemIndexTrail, r, c, e)}\r\n                penColor={penColor}\r\n                setPixelColor={(color, sr, sc, gr, gc) => setPixelColor(currentItemIndexTrail, color, sr, sc, gr, gc)} \r\n                setString={(str, gr, gc) => setString(currentItemIndexTrail, str, gr, gc)}\r\n            />);\r\n\r\n            return <div className=\"flex-container\">{inputGrids}</div>;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {makeInputGrids()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function GridMenus(props) {\r\n    const {indexTrail, setIndexTrail, problemCat, gridType, problem, penColor, setPenColor} = props;\r\n\r\n    function generateIndexTrailSelectLists(indexTrail) {\r\n        let selectLists = [];\r\n\r\n        selectLists.push(<SelectList id=\"type\" key={0} options={[\"context\", \"questions\"]} selection={indexTrail[0]} onChange={(e) => setIndexTrail(0, e.target.value)} />);\r\n\r\n        let maxIndex = problem[indexTrail[0]].length;\r\n\r\n        let options = [...Array(maxIndex).keys()];\r\n\r\n        selectLists.push(<SelectList id=\"parentIndex\" key={1} options={options} selection={indexTrail[1]} onChange={(e) => setIndexTrail(1, e.target.value)} />);\r\n\r\n        if(indexTrail[0] === \"questions\") {\r\n            selectLists.push(<SelectList id=\"questionPart\" key={2} options={[\"stimulus\", \"answer\"]} selection={indexTrail[2]} onChange={(e) => setIndexTrail(2, e.target.value)} />)\r\n        }\r\n    \r\n        return selectLists;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n\r\n            </div>\r\n            {\r\n                ![\"arc\", \"letter-string\"].includes(problemCat) && \r\n                <div className=\"flex-container\">\r\n                    {generateIndexTrailSelectLists(indexTrail)}\r\n                </div>\r\n            }\r\n            \r\n            {\r\n                (gridType === \"pixels\" || problemCat === \"arc\") &&\r\n                <div className=\"addPadding\">\r\n                    <CirclePicker \r\n                        color={penColor} \r\n                        colors={colors} \r\n                        onChangeComplete={(color) => setPenColor(color.hex)} \r\n                        width={colors.length * (circleSize + circleSpacing)} \r\n                        circleSize={circleSize} \r\n                        circleSpacing={circleSpacing}\r\n                    />\r\n                </div>\r\n            }\r\n            \r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport function SelectList(props) {\r\n    const { id, options, selection, onChange } = props;\r\n\r\n    let htmlOptions = [];\r\n\r\n    for(let index in options) {\r\n        htmlOptions.push(<option key={index} value={options[index]}>{options[index]}</option>)\r\n    }\r\n\r\n    return (\r\n        <select id={id} value={selection} onChange={onChange}>\r\n                    {htmlOptions}\r\n        </select>\r\n    )\r\n\r\n}","import './App.css';\r\nimport React, { useState } from 'react';\r\nimport Editor from \"./components/Editor\";\r\nimport { Route, HashRouter} from 'react-router-dom';\r\nimport \"./styles/App.scss\";\r\n\r\nvar fixed_problem; // = require('./fixed_data/arr_data_4.json');\r\n\r\nclass ToggleAnswerButton extends React.Component {\r\n  calculateText() {\r\n    if(this.props.show) {\r\n      return \"Hide Answer\";\r\n    } else {\r\n      return \"Show Answer\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button onClick={this.props.onClick}>\r\n        {this.calculateText()}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nclass Canvas extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.canvasRef = React.createRef()\r\n  }\r\n\r\n  drawGrayscale() {\r\n    var width = this.props.data[0].length;\r\n    var height = this.props.data.length;\r\n    var buffer = new Uint8ClampedArray(width * height * 4)\r\n\r\n    for(var row = 0; row < height; row++) {\r\n      for(var col = 0; col < width; col++) {\r\n        var pos = (row * width + col) * 4\r\n        buffer[pos] = this.props.data[row][col]\r\n        buffer[pos + 1] = this.props.data[row][col]\r\n        buffer[pos + 2] = this.props.data[row][col]\r\n        buffer[pos + 3] = 255\r\n      }\r\n    }\r\n\r\n    const canvas = this.canvasRef.current\r\n    const ctx = canvas.getContext('2d')\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n    \r\n    var imgData = ctx.createImageData(width, height);\r\n    imgData.data.set(buffer)\r\n\r\n    ctx.putImageData(imgData, 0, 0)\r\n  }\r\n\r\n  drawCategorical() {\r\n\r\n    var color_dict = {\r\n      0: \"rgb(0, 0, 0)\", \r\n      1: \"rgb(0, 105, 207)\",\r\n      2: \"rgb(255, 57, 55)\",\r\n      3: \"rgb(0, 197, 67)\",\r\n      4: \"rgb(255, 215, 49)\",\r\n      5: \"rgb(160, 160, 160)\",\r\n      6: \"rgb(249, 22, 179)\",\r\n      7: \"rgb(255, 122, 44)\",\r\n      8: \"rgb(99, 214, 252)\",\r\n      9: \"rgb(130, 15, 35)\",\r\n      10:\"rgb(255, 255, 255)\"\r\n    }\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    var cw = canvas.width;\r\n    var ch = canvas.height;\r\n    var rows = this.props.data.length;\r\n    var cols = this.props.data[0].length;\r\n    var padding = 0.5;\r\n    var w = (cw - (padding * cols)) / cols;\r\n    var h = (ch - (padding * rows)) / rows;\r\n    w = Math.min(w, h);\r\n\r\n    if(rows !== 1) {\r\n      h = Math.min(w, h);\r\n    }\r\n    \r\n\r\n    ctx.clearRect(0, 0, cw, ch);\r\n    ctx.save();\r\n    for (var row = 0; row < rows; row++) {\r\n      for (var col = 0; col < cols; col++) {\r\n        ctx.fillStyle = color_dict[this.props.data[row][col]]\r\n        ctx.fillRect(col * (w + padding), row * (h + padding), w, h)\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.redraw()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.redraw() \r\n  }\r\n\r\n  redraw() {\r\n    if(this.props.type === \"grayscale\") {\r\n      this.drawGrayscale()\r\n    } else if(this.props.type === \"categorical_list\") {\r\n      this.drawCategorical()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <canvas ref={this.canvasRef} {... this.props} />\r\n  }\r\n}\r\n\r\nclass ProblemViewer extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    var problem_data = fixed_problem == null ? {} : fixed_problem;\r\n    this.state = {problem_type: \"all\", problem_type_choices: [\"\"], problem_name: \"\", problem_choices: [\"\"], problem_data: problem_data, description: \"\"}\r\n    this.handleProblemTypeChange = this.handleProblemTypeChange.bind(this)\r\n    this.handleProblemChange = this.handleProblemChange.bind(this)\r\n  }\r\n\r\n  getProblemTypes() {\r\n    let requestUrl = `/api/categories`\r\n    fetch(requestUrl)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        data.unshift(\"all\");\r\n        this.setState({problem_type: \"all\", problem_type_choices: data}, (state) => {\r\n          this.getRelevantProblems();\r\n        });\r\n      })\r\n  }\r\n\r\n  getRelevantProblems() {\r\n    let url_tail = this.state.problem_type === \"all\" ? \"all\" : this.state.problem_type;\r\n    let requestUrl = `/api/${url_tail}`\r\n    fetch(requestUrl)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        var ids = []\r\n        for(var i = 0; i < data.length; i++) {\r\n          if(data[i].hasOwnProperty('id')) {\r\n            ids.push(data[i].id);\r\n          }\r\n        }\r\n        ids.unshift(\"\");\r\n        this.setState({problem: \"\", problem_choices: ids});\r\n      });\r\n  }\r\n\r\n  getDescription() {\r\n    console.log(\"getting description\");\r\n    let requestUrl = `/api/${this.state.problem_type}/${this.state.problem_name}/description`;\r\n    fetch(requestUrl)\r\n        .then((res) => {\r\n          console.log(res);\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(JSON.stringify(data));\r\n          this.setState({description: data.description});\r\n        });\r\n  }\r\n\r\n  getProblem() {\r\n    if(this.state.problem_name !== \"\") {\r\n      let requestUrl = `/api/${this.state.problem_type}/${this.state.problem_name}`\r\n      fetch(requestUrl)\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          if(fixed_problem == null) {\r\n            // console.log(\"fixed_problem is null\");\r\n            this.setState({problem_data: data}, (state) => {\r\n              this.getDescription();\r\n            })\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getProblemTypes();\r\n  }\r\n\r\n  handleProblemTypeChange(event) {\r\n    if(event.target.value !== this.state.problem_type) {\r\n      this.setState({problem_type: event.target.value}, (state) => {\r\n        this.getRelevantProblems()\r\n      });\r\n    } \r\n  }\r\n\r\n  handleProblemChange(event) {\r\n    this.setState({problem_name: event.target.value}, (state) => {\r\n      this.getProblem();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    var problem_part;\r\n    var data = this.state.problem_data\r\n    console.log(this.state.description)\r\n    if(data && Object.keys(data).length === 0) {\r\n      problem_part = []\r\n    } else {\r\n      // console.log(\"supposedly setting problem type\")\r\n      problem_part = (\r\n        <div>\r\n        <div>{this.state.description}</div>\r\n        <div className='side_by_side'>\r\n          <ContextViewer grids={this.state.problem_data.context} />\r\n          <TestViewer answer_type={this.state.problem_data.answer_type} questions={this.state.problem_data.questions} />\r\n        </div>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div>\r\n        <div className='side_by_side'>\r\n          <SelectList value={this.state.problem_type} options={this.state.problem_type_choices} onChange={this.handleProblemTypeChange} />\r\n          <SelectList value={this.state.problem_name} options={this.state.problem_choices} onChange={this.handleProblemChange} />\r\n        </div>\r\n        {problem_part}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass QuestionViewer extends React.Component {\r\n  addStimulus(comps) {\r\n    var rows = this.props.data.stimulus.rows;\r\n    var cols = this.props.data.stimulus.cols;\r\n    if(rows > 0 && cols > 0) {\r\n      comps.push(<GridViewer key={0} rows={rows} cols={cols} items={this.props.data.stimulus.items} type={this.props.data.stimulus.type}/>);\r\n    }\r\n  }\r\n\r\n  addChoices(comps) {\r\n    var no_choices = this.props.data.choices.length;\r\n    if(no_choices > 0) {\r\n      var rows = Math.ceil(no_choices / 3);\r\n      var cols = 3\r\n      comps.push(<GridViewer key={1}  rows={rows} cols={cols} items={this.props.data.choices} type={this.props.answer_type} />)\r\n    }\r\n  }\r\n  addAnswer(comps) {\r\n    var answer_type;\r\n    if(this.props.data.choices.length > 0) {\r\n      answer_type = \"number\";\r\n    } else {\r\n      answer_type = this.props.answer_type;\r\n    }\r\n    comps.push(<AnswerViewer key={2} answer={this.props.data.answer} type={answer_type} />);\r\n  }\r\n\r\n  render() {\r\n    var comps = []\r\n    this.addStimulus(comps)\r\n    this.addChoices(comps)\r\n    this.addAnswer(comps)\r\n    return <div>{comps}</div>\r\n  }\r\n}\r\n\r\nclass AnswerViewer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: false, answer: this.props.answer}\r\n    this.onButtonPress = this.onButtonPress.bind(this)\r\n  }\r\n\r\n  onButtonPress() {\r\n    this.setState({show: !this.state.show, answer: this.props.answer})\r\n  }\r\n\r\n  render() {\r\n    var comps = [<ToggleAnswerButton key={0} onClick={this.onButtonPress} show={this.props.show} />]\r\n    \r\n    // show the answer if the state \r\n    if(this.state.show && (this.props.answer === this.state.answer)) {\r\n      comps.push(<ContentSquare key={1} type={this.props.type} data={this.props.answer} />)\r\n    }\r\n    else if (this.state.show) {\r\n      this.setState({show: false, answer: this.props.answer})\r\n    }\r\n    else if (this.props.answer !== this.state.answer) {\r\n      this.setState({answer: this.props.answer})\r\n    }\r\n\r\n    return (\r\n      <div>{comps}</div>\r\n    )\r\n  }\r\n}\r\n\r\nclass TestViewer extends React.Component {\r\n  generateQuestionDivs() {\r\n    var questions = []\r\n    for(var i = 0; i < this.props.questions.length; i++) {\r\n      questions.push(<QuestionViewer key={i} data={this.props.questions[i]} answer_type={this.props.answer_type} />)\r\n    }\r\n\r\n    return questions\r\n  }\r\n\r\n  render() {\r\n    var questions = this.generateQuestionDivs()\r\n    return (\r\n      <div>{questions}</div>\r\n    )\r\n  }\r\n}\r\n\r\nclass GridViewer extends React.Component {\r\n  getRelevantData(arr, index) {\r\n    if (index < arr.length) {\r\n      return arr[index]\r\n    }\r\n    else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  buildTable() {\r\n    var table = [];\r\n    var row = [];\r\n\r\n    for (var i = 0; i < this.props.rows; i++) {\r\n      row = [];\r\n      for (var j = 0; j < this.props.cols; j++) {\r\n        var item_index = i * this.props.cols + j;\r\n        var data = this.getRelevantData(this.props.items, item_index);\r\n        //console.log(\"item_index\", item_index, this.props.items.length, this.props.rows, this.props.cols);\r\n        row.push(<td key={item_index}><ContentSquare type={this.props.type} data={data}/></td>);\r\n      }\r\n      table.push(<tr key={i}>{row}</tr>);\r\n    }\r\n\r\n    return <table><tbody>{table}</tbody></table>\r\n  }\r\n  render() {\r\n    return <div>{this.buildTable()}</div>;\r\n  }\r\n}\r\n\r\nclass SelectList extends React.Component {\r\n  makeOptions() {\r\n    var options = []\r\n    for(let ind in this.props.options) {\r\n      options.push(<option key={ind} value={this.props.options[ind]}>{this.props.options[ind]}</option>)\r\n    }\r\n    return options\r\n  }\r\n  render() {\r\n    var options = this.makeOptions();\r\n    return (\r\n      <select value={this.props.value} onChange={this.props.onChange}>\r\n        {options}\r\n      </select>\r\n    )\r\n  }\r\n}\r\n\r\nclass ContextViewer extends React.Component {\r\n  getTables() {\r\n    var tables = [];\r\n    for(var i = 0; i < this.props.grids.length; i++) {\r\n      tables.push(<GridViewer key={i} rows={this.props.grids[i].rows} cols={this.props.grids[i].cols} items={this.props.grids[i].items} type={this.props.grids[i].type} />)\r\n    }\r\n    return tables\r\n  }\r\n\r\n  render() {\r\n    var tables = this.getTables()\r\n    return (\r\n      <div className='side_by_side'>{tables}</div>\r\n    )\r\n  }\r\n}\r\n\r\nclass ContentSquare extends React.Component {\r\n  decode() {\r\n    if(this.props.data === null) {\r\n      return \"\"\r\n    } else if(this.props.type === \"string\") {\r\n      return this.props.data\r\n    } else if(this.props.type === \"grayscale\" || this.props.type === \"categorical_list\") {\r\n      //console.log(\"supposedly rendering some canvases\")\r\n      return <Canvas type={this.props.type} data={this.props.data} />\r\n    } else if(this.props.type === \"number\") {\r\n      return this.props.data\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var thing = this.decode()\r\n    return <div>{thing}</div>\r\n  }\r\n}\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div>\r\n          <HashRouter  basename=\"/\">\r\n              <Editor />\r\n          </HashRouter>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"create\");\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <button onClick={() => setMode(\"create\")} className=\"button\">Creator</button>\r\n        <button onClick={() => setMode(\"view\")} className=\"button\">Viewer</button>\r\n      </div>\r\n      {mode === \"view\" &&\r\n        <ProblemViewer />\r\n      }\r\n      {mode === \"create\" &&\r\n        <Editor />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n*/\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}